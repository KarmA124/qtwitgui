#summary About this program

<wiki:toc max_depth="2"/>

= Usage =

== General ==
  * The first time the program is run, or any other time there is nothing in the "wit path" variable and it tries to look for wit, you should be presented a window to select the wit executable.

  * This program is designed to deal with 1 game at a time, not with folders containing multiple games.

  * This program works by getting input from the user, then building a list of commands and runs wit as a process and passes it those commands.

  * Then when wit sends output through stdout or stderr ( the stuff you usually see in the console ) this program reads it and interprets it into data to use in the GUI.  Due to this, changes in the formatting of the output text from wit can break this program easily.

  * Why not just incorporate code from wit into this program and forget the external process?  As it is right now, wit is still a work in progress.  Bugs are getting fixed and features are being added.  It would be pointless to borrow code from that project now only to have the borrowed code be improved and obsoleted in a week.

== Tab 1 ( Game )==
  * Load a game by using file-> open ( ctrl+O ), dragging a game onto the window, or argv[ 1 ] ( open with... ).  You can use a file or a folder containing an extracted game filesystem.  The program will run a couple processes of wit to gather information about the selected game, and then display the information in the GUI.

  * Once a game has been loaded, you can select file->save as ( ctrl+ A ) to open a dialog box and save the game.

  * You can browse the filesystem of the game, or select different parameters such as the name, ID, and IOS.  Changing these values has no effect on the game that you have loaded, these changes are only used when you save a game.

  * For certain fields, editing is disabled.  You must enable these...  To edit the title, you must check the "update title" box.

  * For IOS and region, there is a global setting.  If these settings are enabled, every time you save a game, it will use the values from the "settings" tab.  If these settings are not used, you can use the drop boxes in the "game" tab to change the IOS and region on a game by game basis.

  *  This tab has a couple things set up that are not functional yet, as there is no direct support for it in wit...  Detecting the game IOS, extracting files, replacing files
----



== Tab 2 ( wit output ) ==

  * This tab is used to display output from wit.  There is no console class in Qt, so I have improvised this.  It will try to mimic the console, but it is not intended to be fully functional.  It is read-only.

  * The text is cleared automatically between jobs.

  * There is a copy button which selects all the text and copies it to the clipboard.  Also supported are direct mouse highlighting, ctrl+c, and right click-copy.
----




== Tab 3 ( general settings ) ==

  * As the name suggests, this is a place to select some settings.

  * For descriptions for settings, hover the mouse over them.  Most should have tooltips.

  * Any settings here will supersede one from another tab with the same function.  This is to say, the IOS & region settings here must be disabled to use the ones in the first tab.

  * Clicking the "save settings" button writes a "QtWitGui.ini" file in the user's home directory.  The ini will be read each time the program starts up.  You can open it in a text viewer to see what other stuff is in it or delete it to revert this program back to default.  There is no other setting file hidden anywhere.
----





== Compiling ==

  * Get your meathooks on the Qt SDK ( http://qt.nokia.com/downloads/ ).  At the very least, you need the libraries and the files in /bin/.  Qmake is used to generate makefiles.  Once you have a makefile, good ole, everyday make is used to build the project.

  * I suggest getting the full SDK since its free anyways.  Then just open the .pro file from this svn in Qt Creator ( IDE ) and click the picture of a hammer in the lower-right.
----


== Creating and using language files ==

  * This program determines the appropriate language file to use by checking the environmental variable at startup.

  * I have added a bit of debug output viewable if running this program from a terminal to display the region variable.

  * open the .ts file from this svn in Qt Linguist.  Select your country and language.  Select a string and enter new text for your language.  Then do "translation -> Done and Next" (ctrl+Enter).  It will give a green check mark and move on to the next string. Once you are done, do file->release and save a .qm file. 
        <a target='_blank' href='http://img808.imageshack.us/img808/9990/qtlinguist.png'><img src='http://img808.imageshack.us/img808/9990/qtlinguist.th.png' border='0'/></a>

  * Since I am using USA/english (en_US )  on my PC, the program will first try to load "witGuiLang_en_US.qm".  Failing that, it will try "witGuiLang_en.qm".  If there still is no language file found, it will fall back to the version compiled within the program itself.  This makes it possible for the program to have a French translation embedded within itself and the user is still able to load their own translation if they disagree with the translation.

  * The qm files embedded in this program are given generic names ( language only, no country specification ).  The same French will be used for French-Canada and French-France.

  * There is no guarantee that the .ts file will be up-to-date.  There is an instruction in the project file to update the ts files, but this instruction only gets executed when qmake is run, not every time the program is compiled.  Because of this, there may be strings used in the project that are not in the current .ts file.  This file in no automatically updated.  You can run "lupdate -verbose ./witGui.pro".  This will grab the current strings used in the program and slap them in the .ts file.  Then you can use that to create a .qm file.

  * You can submit to me a filled out .ts file and I may include it in the project.  This will allow myself and others to keep all the translated strings and add new ones to be translated when needed, making updating translations much easier.
----




= Platform Specific Stuff =

== linux ==
  * Everything should just work.  I don't have a Linux box without the Qt SDK installed, so I can't say for sure if there are required dynamically linked libraries or anything.
----



== windows ==
  * It is possible to run this exe without having the Qt SDK installed, but it requires at least 3 .dll files:  QtCore4.dll, QtGui4.dll, libgcc_s_dw2-1.dll.
----




== OS-X ==
  * Everything should just work.  I don't have a Mac without the Qt SDK installed, so I can't say for sure, though.